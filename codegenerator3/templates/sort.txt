import { Component, OnInit } from '@angular/core';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { CdkDragDrop, CdkDragStart, moveItemInArray } from '@angular/cdk/drag-drop';
import { NAMESearchOptions, NAMESearchResponse, TYPESCRIPTNAME } from '/*FOLDERS*/../common/models/NAME_TOLOWER.model';
import { NAMEService } from '/*FOLDERS*/../common/services/NAME_TOLOWER.service';
import { PagingHeaders } from '/*FOLDERS*/../common/models/http.model';
import { ErrorService } from '/*FOLDERS*/../common/services/error.service';
import { ToastrService } from 'ngx-toastr';
ENUM_IMPORTS
@Component({
    selector: 'HYPHENATEDNAME-sort',
    templateUrl: './NAME_TOLOWER.sort.component.html',
    standalone: false
})
export class NAMESortComponent implements OnInit {

    public headers: PagingHeaders = new PagingHeaders();
    private bodyElement: HTMLElement = document.body;
    public PLURALNAME_TOCAMELCASE: TYPESCRIPTNAME[];
ENUM_PROPERTIESPARENTPKFIELDS
    constructor(
        public modal: NgbActiveModal,
        private CAMELCASENAMEService: NAMEService,
        private errorService: ErrorService,
        private toastr: ToastrService
    ) {
    }

    ngOnInit(): void {
        this.CAMELCASENAMEService.search({ SEARCH_PARAMSpageSize: 0, includeParents: true } as NAMESearchOptions)
            .subscribe({
                next: response => this.PLURALNAME_TOCAMELCASE = response.PLURALNAME_TOCAMELCASE,
                error: err => this.errorService.handleError(err, "PLURALNAME", "Load")
            });
    }

    dragStart(event: CdkDragStart) {
        this.bodyElement.classList.add('inheritCursors');
        this.bodyElement.style.cursor = 'grabbing';
    }

    drop(event: CdkDragDrop<NAME[]>) {
        this.bodyElement.classList.remove('inheritCursors');
        this.bodyElement.style.cursor = 'unset';
        moveItemInArray(this.PLURALNAME_TOCAMELCASE, event.previousIndex, event.currentIndex);
    }

    close() {
        this.CAMELCASENAMEService.sort(HIERARCHYFIELDSthis.PLURALNAME_TOCAMELCASE.map(o => o.KEYFIELD))
            .subscribe({
                next: () => {
                    this.modal.close();
                    this.toastr.success("The sort order has been updated", "Change Sort Order");
                },
                error: err => {
                    this.errorService.handleError(err, "PLURALNAME", "Sort");
                }
            });
    }

}
